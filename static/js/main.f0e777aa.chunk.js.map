{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["scroll","keyframes","Background","styled","div","Content","Intro","GitHubRef","Footer","App","Fragment","target","rel","href","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wxCAGA,IAAMA,EAASC,oBAAH,KAMNC,EAAaC,UAAOC,IAAV,IAKCJ,GAGXK,EAAUF,UAAOC,IAAV,KAWPE,EAAQH,UAAOC,IAAV,KAKLG,EAAYJ,UAAOC,IAAV,KASTI,EAASL,UAAOC,IAAV,KAuBGK,MAhBf,WACI,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACR,EAAD,KACI,kBAACG,EAAD,KACI,kBAACC,EAAD,kBACA,kBAACC,EAAD,KAAW,iDAAsB,uBAAGI,OAAO,SAASC,IAAI,sBAAsBC,KAAK,8BAAlD,UAAtB,MACX,kBAACN,EAAD,kCAAqC,uBAAGI,OAAO,SAASC,IAAI,sBAAsBC,KAAK,+BAAlD,YAArC,iCAIR,kBAACL,EAAD,oCChDQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0KCXN,IAAMC,EAAcC,4BAAH,KAMjBC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,QAAD,MACA,kBAACJ,EAAD,MACA,kBAAC,EAAD,OAEJK,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0e777aa.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { keyframes } from 'styled-components'\n\nconst scroll = keyframes`\n    0%{background-position:0% 50%}\n    50%{background-position:100% 50%}\n    100%{background-position:0% 50%}\n`\n\nconst Background = styled.div`\n    background: linear-gradient(320deg, #09c494, #c40973, #0939c4);\n    background-size: 600% 600%;\n    height: 100vh;\n\n    animation: ${scroll} 60s ease infinite;\n`\n\nconst Content = styled.div`\n    color: #dddddddd;\n\n    height: 100%;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n`\n\nconst Intro = styled.div`\n    font-size: 80pt;\n    margin-bottom: 40px;\n`\n\nconst GitHubRef = styled.div`\n    font-size: 20pt;\n    margin: 5px;\n\n    a {\n        color: #dddddddd;\n    }\n`\n\nconst Footer = styled.div`\n    color: #dddddd;\n    background-color: #222;\n    padding: 20px;\n    min-height: 100px;\n`\n\nfunction App() {\n    return (\n        <React.Fragment>\n            <Background>\n                <Content>\n                    <Intro>Hi there!</Intro>\n                    <GitHubRef><p>You can find me on <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://github.com/DonatJR'>GitHub</a>.</p></GitHubRef>\n                    <GitHubRef>Be sure to also check out <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://github.com/SailReal'>SailReal</a> for some awesome projects!</GitHubRef>\n                </Content>\n            </Background>\n\n            <Footer>Impressum will be here ;)</Footer>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Reset } from 'styled-reset'\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  html, * {\n    font-family: 'Roboto', sans-serif;\n    box-sizing: border-box;\n  }\n`\nReactDOM.render(\n    <React.StrictMode>\n        <Reset />\n        <GlobalStyle />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}